---------------------------------------
[DevOps 란?]
 - (입문-level) DevOps 이해하기
---------------------------------------

* 채용공고 사이트에서 회사에서 기술 보유자를 얼마나 찾고 있는지 
  >> 어떤 기술스택이 트렌드인지 파악

["오늘의 토픽"] 왜 회사들은 DevOps를 필요로 하는가?

DevOps란?
 - development(개발) + operation(운영)
 - 2008년에 처음 사용됨
 - 목적: 서비스(어플리케이션)를 고객에게 신속하고 안정하게 제공하는 것
 - 방법: 조직의 역량을 개선시키려는 방식 및 도구(Tools)의 조합 또는 문화철학(Culture)
 - 정의해보기: "DevOps는 ㅇㅇㅇ이다."

Manifesto for Agile Software Development (Agile Software Development 선언문)
 - We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value.
 - 우리는 소프트웨어를 개발하고 또 다른 사람을 도와주면서 SW개발에 더 나은 방법을 찾아가고 있다. 이 작업을 통해 우리는 다음을 가치있게 여긴다.
 - 우리는 다음을 가치있게 여긴다.
 - '공정과 도구' 보다는 '개인과 상호작용'
 - '포괄적인 문서' 보다는 '작동하는 소프트웨어'
 - '계약 협상' 보다는 '고객과의 협력'
 - '계획을 준수' 보다는 '변화에 대응'

애자일 방법론으로 인해 생긴 운영 이슈
 - 기능의 추가가 빈번하게 이루어 지고 배포 프로세스를 빈번하게 수행함
 - 운영을 위한 다양한 도구와 방법이 생김
 - 계속적인 개발로 인해 나타난 운영 과제 -> DevOps 사고 방식이 형성됨

애자일 방법론
 - 고객의 요구사항을 민첩하게 반영하지 못하고 개발 소명 주기가 긴 단점을 보완하기 위해 나온 방법론
 - '애자일 방법론'으로 인해 가장 크게 달라진 점은
    1) 기능의 추가가 빈번하게 이루어지고 
    2) 서비스 배포의 주기가 짧아진 것

흐름
 - 애자일 방법론이 확대되면서 생긴 불편함 2가지
   1) 지속적인 빌드와 배포의 자동화가 필요하게 되었음
   2) 서비스 운영을 위한 다양한 도구와 방법이 생기게 되었음
 - 이 2가지 니즈로 인해 DevOps가 나오게 되었음

Agile Process vs. DevOps Process
 - Agile: 고객과 개발자 사이의 gap을 줄이기 위한 방법들이 발전한 형태
 - DevOps: 애자일 방법론으로 인해 생겨난 개발자 QA와 운영조직과의 gap을 줄이기 위한 방법을 발전시킨 형태

[차이를 한문장으로 정의] Agile vs. DevOps
 - DevOps는 개발자와 운영자의 관계에 중점을 두고 배포 프로세스를 강조한 개발 방법론

"DevOps를 어떻게 적용해야 할까?" 관련 PT 하나 소개
 - when? 2009년
 - where? velocity conference
 - who? John Allspaw, Paul Hammond, Flickr
 - what? 10+ Deploys per Day: Dev and Ops Cooperation at Flickr
 - 개발과 운영 간에 반복해서 발생하는 이슈

전통적인 사고
 - 개발자: 새로운 것과 신기술을 추구 // 새로운 기술을 적용하여 시스템을 개발
 - 운영자: 사이트를 안정적이게 유지 // 변화는 불안정함을 내포

사고의 전환
 - 운영자의 목표는 사이트를 안정적이고 빠르게 유지하려는 게 아니다!
 - 운영자의 목표는 비즈니스를 가능하게 만드는 것!
 - 개발자도 동일한 목표를 가지고 있음
 - 비즈니스는 변화가 필요 but 변화는 많은 장애의 원인이 되기도 함
 - 그렇다면, "변화로 인한 위험을 tool과 culture로 줄이자" by John Allspaw, Paul Hammond
 - "Lowering risk of change through tools and culture" (by John Allspaw, Paul Hammond)
 - 지향점: "Ops who think like devs" & "Devs who think like ops"

DevOps 적용방법: 문화
 - 1) 존중하자. 모든 개발자가 게으르다는 생각을 버리자.
 - 2) 서로 믿자. 우리는 다른 사람들이 비즈니스를 위해 최선을 다하고 있다는 것을 믿어야 한다.
 - 3) 실패에 대한 건강한 자세를 가지자.
 - 4) 비난하지 말자. 손가락질 그만!

DevOps 문화는 어떻게 만들까?
 - 1) 개발 프로젝트 회의에 QA팀, 운영팀, 보안팀이 함께 참석하고 초기 설계부터 각 부서의 의견을 반영하여 개발을 진행한다.
 - 2) 개발자, 운영자, QA 담당자 모두 서비스의 성공과 실패에 대해서 공동 책임을 진다.
      ('인프라는 잘해야 본전이다' >> 이러한 인프라 업계에서의 피해의식이 건전한 데브옵스 문화를 방해함)
 - "실패에 대해 비난 없는 견해는 실수가 발생한다는 것을 인저하지만 사용자와 조직 모두 학습, 성장, 개선할 수 있다는 가정 하에 운영되는 성장의 사고 방식을 채택하기 때문에 효과적이다." by Jennifer Davis (Effective DevOps)

DevOps 적용방법: 도구
 - DevOps 적용에 도구가 필요한 이유: 서비스를 보다 신속하고 안전하게 배포하기 위한 자동화된 도구, 개발팀과 운영팀 간의 긴밀한 협업을 위한 도구, 서로 간의 신뢰를 쌓기 위한 투명하고 가시성있는 도구 등이 필요

DevOps 적용을 위한 도구 3가지
 - 1) CI/CD
 - 2) Observability
 - 3) Collaboration

(도구.1) CI/CD
 - CI(Continuous Integration: 지속적인 통합): 어플리케이션의 새로운 변경 사항을 정기적으로 빌드 및 테스트하여 공유 레포지토리에 통합하는 것
 - CD(Continuous Delivery: 지속적인 제공): 공유 레포지토리에서 프로덕션 환경까지 릴리즈되는 것
 - CI/CD 자동화를 통해서 어플리케이션을 보다 신속하게 빌드하고 배포할 수 있는 도구들이 필요함

성공적인 CI 자동화의 조건
 - 다수의 개발자가 개발할 수 있는 형상관리 툴 (e.g. Git)
 - 신속한 기능 개발에 용이한 소프트웨어 아키텍처 (e.g. microservice architecture)
 - 어디에나 쉽게 배포가능한 소프트웨어 패키징 방법 (e.g. Docker)

성공적인 CD 자동화의 조건
 - 파이프라인 자동화 툴 (e.g. jenkins, travis CI, github actions, gitlab runner)
 - 인프라 프로비저닝 자동화(IaC) (e.g. ansible, terraform)
 - 클라우드 기반의 어플리케이션 운영 플랫폼 (e.g. EKS, AKS, Kubernetes)

(도구.2) Observability
 - 모니터링, 로깅, 알러트 등을 포함
 - 전통적인 인프라(서버, 네트워크) 모니터링 이외에 어플리케이션의 성능과 전반적인 상태를 확인할 수 있는 메트릭과 로깅 시스템을 통해 지속적인 가시성을 확보해야 한다.
 - '어플리케이션 상태 모니터링', '어플리케이션 로그 모니터링', ...

(도구.3) Collaboration (=협업툴)
 - DevOps의 성공적인 적용을 위해서는 커뮤니케이션과 협업이 원활히 수행될 수 있는 환경을 제공하는 도구가 필요
 - 이슈 트래킹 및 지표 관리 (e.g. Jira, confluence)
 - 알람 자동화, 메신저 (e.g. slack, mattermost)

DevOps 적용 시 유의사항
 - 1) DevOps에 대한 설명과 방향이 지나치게 도구 위주로 강조되고 있는 경향이 있음
      DevOps를 적용할 때는 도구 자체가 목적이 되지 않도록 꼭 다시 한 번 생각해 보자
 - 2) DevOps 문화를 만들기 위해 개발자와 운영자를 하나의 팀으로 만들거나 개발자를 운영자화(?) 시키는 경우가 있음. 조직 개편이 필요할 수도 있지만 그보다는 담당자들의 긴밀한 협업이 더 중요함.
 - 3) DevOps 구성원들이 상호 신뢰성을 쌓기 위해서는 모든 구성원들이 같은 데이터를 보고 협업할 수 있어야 함. 따라서 모니터링, 로깅 등의 축적된 데이터는 필수임.

------------------
[DevOps Q&A.]

Q.1) DevOps 공부할 수 있는 사이트?
 - [강추] 피닉스프로젝트 (DevOps 도입 사례를 스토리 텔링으로 설명)
 - 서버/인프라 엔지니어를 위한 DevOps
 - IT 운용 체제 변화를 위한 데브옵스

Q.2) DevOps 사례?
 - 기능 별로 조직 구조가 형성됨 >> 인증, 빌링, 소셜, 공통플랫폼
 - 마이크로서비스 형태로 컨테이너 형태로 배포되어 있는 어플리케이션
 - 자동화된 CI/CD 툴을 활용
 - (기업 예시) AWS, 넷플릭스, 페이스북, 월마트 등 회사들

Q.3) 게임개발 -> 데브옵스 관점의 변화로는 어떤 것이 필요할지?
 - 개발자는 인프라를 이해해야 함
 - QA팀은 서비스와 CI/CD 구조에 대해 이해해야 함
 - 운영자는 어플리케이션(성격, 구조)에 대해 이해해야 함
 >> '공동의 목표(비즈니스 가능케)를 가진 공동체이기 때문'

-----------------------------------------------
* source ("DevOps 이해")
https://www.youtube.com/watch?v=ffVSvYLGZfw
-----------------------------------------------




